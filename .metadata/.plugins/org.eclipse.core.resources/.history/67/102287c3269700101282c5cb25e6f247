package com.example.backend.auth.service;

import com.example.backend.auth.entity.Role;
import com.example.backend.auth.entity.User;
import com.example.backend.auth.exception.CustomAppException;
import com.example.backend.auth.repository.UserRepository;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.HashSet;

/**
 * Service class for user management.
 * Handles registration and user-related business logic.
 */
@Service
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * Registers a new user with default role.
     * Throws CustomAppException if username already exists.
     *
     * @param username raw username
     * @param rawPassword raw password
     * @return saved User entity
     */
    public User registerUser(String username, String rawPassword) {
        // Check if username already exists
        if (userRepository.existsByUsername(username)) {
            throw new CustomAppException(
                "Username already exists", HttpStatus.BAD_REQUEST
            );
        }

        // Create new User entity
        User user = new User();
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(rawPassword));

        // Assign default role (change to ROLE_USER if needed)
        user.setRoles(new HashSet<>(Collections.singletonList(Role.ROLE_ADMIN)));

        // Save to DB
        return userRepository.save(user);
    }
}
