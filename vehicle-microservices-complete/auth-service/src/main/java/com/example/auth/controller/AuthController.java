package com.example.auth.controller;
import com.example.auth.dto.AuthRequest; import com.example.auth.dto.AuthResponse; import com.example.auth.dto.RegisterRequest; import com.example.auth.model.RefreshToken; import com.example.auth.model.User; import com.example.auth.repo.UserRepository; import com.example.auth.security.JwtUtil; import com.example.auth.service.TokenService; import com.example.auth.service.UserService; import org.springframework.http.ResponseEntity; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.web.bind.annotation.*; import javax.validation.Valid; import java.util.Optional; import java.util.Map;
@RestController @RequestMapping("/auth") public class AuthController {
    private final UserService userService; private final AuthenticationManager authenticationManager; private final JwtUtil jwtUtil; private final UserRepository userRepository; private final PasswordEncoder passwordEncoder; private final TokenService tokenService;
    public AuthController(UserService userService, AuthenticationManager authenticationManager, JwtUtil jwtUtil, UserRepository userRepository, PasswordEncoder passwordEncoder, TokenService tokenService) {
        this.userService = userService; this.authenticationManager = authenticationManager; this.jwtUtil = jwtUtil; this.userRepository = userRepository; this.passwordEncoder = passwordEncoder; this.tokenService = tokenService;
    }
    @PostMapping("/register") public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest req){ User u = userService.registerUser(req.getUsername(), req.getPassword()); return ResponseEntity.ok(Map.of("id", u.getId())); }
    @PostMapping("/login") public ResponseEntity<?> login(@RequestBody AuthRequest req){ try{ authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(req.getUsername(), req.getPassword())); }catch(BadCredentialsException ex){ return ResponseEntity.status(401).body(Map.of("error","Invalid username or password")); } Optional<User> userOpt = userRepository.findByUsername(req.getUsername()); if(userOpt.isEmpty()) return ResponseEntity.status(401).body(Map.of("error","User not found")); User user = userOpt.get(); var roles = user.getRoles().stream().map(Enum::name).collect(java.util.stream.Collectors.toSet()); String accessToken = jwtUtil.generateAccessToken(user.getUsername(), roles); RefreshToken refreshToken = tokenService.createRefreshToken(user); return ResponseEntity.ok(new AuthResponse(accessToken, refreshToken.getToken())); }
    @PostMapping("/refresh") public ResponseEntity<?> refresh(@RequestBody String refreshTokenStr){ Optional<RefreshToken> tokenOpt = tokenService.getRepository().findByToken(refreshTokenStr); if(tokenOpt.isEmpty()) return ResponseEntity.status(401).body(Map.of("error","Invalid refresh token")); RefreshToken rt = tokenOpt.get(); if(tokenService.isTokenExpired(rt)){ tokenService.getRepository().delete(rt); return ResponseEntity.status(401).body(Map.of("error","Refresh token expired")); } String username = rt.getUser().getUsername(); var roles = rt.getUser().getRoles().stream().map(Enum::name).collect(java.util.stream.Collectors.toSet()); String accessToken = jwtUtil.generateAccessToken(username, roles); tokenService.getRepository().delete(rt); RefreshToken newRt = tokenService.createRefreshToken(rt.getUser()); return ResponseEntity.ok(new AuthResponse(accessToken, newRt.getToken())); }
    @PostMapping("/logout") public ResponseEntity<?> logout(@RequestBody String refreshTokenStr){ Optional<RefreshToken> tokenOpt = tokenService.getRepository().findByToken(refreshTokenStr); tokenOpt.ifPresent(tokenService.getRepository()::delete); return ResponseEntity.ok(Map.of("message","Logged out")); }
}
